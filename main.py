# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BwRfnpDU1J0K6dzIGjpNWHz9A_ADEA3W
"""

from fastapi import FastAPI
from typing import List, Dict
import requests
from bs4 import BeautifulSoup
import os

app = FastAPI()

# ðŸ“Œ Function to read tickers from a file
def read_tickers_from_file(file_path: str) -> List[str]:
    if not os.path.exists(file_path):
        return []
    with open(file_path, 'r') as f:
        tickers = [line.strip() for line in f if line.strip()]
    return tickers

# ðŸ“Œ Function to scrape Yahoo Finance
def scrape_yahoo_finance(ticker: str) -> Dict:
    base_url = f"https://finance.yahoo.com/quote/{ticker}"
    headers = {"User-Agent": "Mozilla/5.0"}
    result = {"ticker": ticker}

    try:
        response = requests.get(base_url, headers=headers)
        soup = BeautifulSoup(response.text, 'html.parser')

        # Current price
        price = soup.select_one('fin-streamer[data-field="regularMarketPrice"]')
        result["price"] = price.text if price else "N/A"

        # PE Ratio
        pe_ratio = soup.find('td', string='PE Ratio (TTM)')
        result["pe_ratio"] = pe_ratio.find_next_sibling('td').text if pe_ratio else "N/A"

        # Beta
        beta = soup.find('td', string='Beta (5Y Monthly)')
        result["beta"] = beta.find_next_sibling('td').text if beta else "N/A"

    except Exception as e:
        result["error"] = str(e)

    return result

# ðŸ“Œ Endpoint: /scrape-from-file
@app.get("/scrape-from-file")
def scrape_from_file():
    file_path = "tickers.txt"  # file should be in the same directory as the app
    tickers = read_tickers_from_file(file_path)

    if not tickers:
        return {"error": "Ticker file not found or empty."}

    results = [scrape_yahoo_finance(ticker) for ticker in tickers]
    return {"data": results}